---
import { websiteMetadata, websiteLocalStorage } from "@data/website";

interface Props {
    title?: string;
    description?: string;
    image?: {
        src: string;
        alt: string;
    };
    isArticle?: boolean;
    jsonLD?: string;
    robots?: string;
}

const {
    title,
    description,
    image,
    isArticle = false,
    jsonLD,
    robots
} = Astro.props;

const url = Astro.url;

const themeKey = websiteLocalStorage.themeKey;
---

<head>
    <meta charset="utf-8">
    <!--TODO: <link rel="icon" type="image/svg+xml" href="/favicon.svg" />-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
    <meta name="description" content={description}>

    <!-- SEO -->
    <link rel="canonical" href={url} />

    <!-- Open Graph -->
    <meta property="og:site_name" content={websiteMetadata.logo} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={url} />
    <meta property="og:locale" content="en_GB" />
    <meta property="og:type" content={isArticle ? "article" : "website"} />
    <meta property="og:image" content={image?.src || websiteMetadata.image.src} />
    <meta property="og:image:url" content={image?.src || websiteMetadata.image.src} />
    <meta
        property="og:image:secure_url"
        content={image?.src || websiteMetadata.image.src}
    />
    <meta property="og:image:type" content="image/jpeg" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="600" />
    <meta property="og:image:alt" content={image?.alt || websiteMetadata.image.alt} />

    <!-- Twitter -->
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={image?.src || websiteMetadata.image.src} />
    <meta name="twitter:image:alt" content={image?.alt || websiteMetadata.image.alt} />
    <meta name="twitter:domain" content={import.meta.env.SITE} />

    {robots &&
        <meta name="robots" content={robots} />}

    <!-- JSON LD -->
    {jsonLD &&
        <Fragment set:html={jsonLD} />}
</head>

<script define:vars={{ themeKey }}>
    const dark = "dark";

    const getTheme = () => {
        if (typeof localStorage === "undefined") {
            return "";
        }

        const existingTheme = localStorage.getItem(themeKey);
        if (existingTheme !== undefined && existingTheme !== null) {
            return existingTheme;
        }

        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return dark;
        }

        return "";
    };

    const theme = getTheme();
    if (theme === dark) {
        document.documentElement.classList.add(dark);
    } else {
        document.documentElement.classList.remove(dark);
        if (document.documentElement.classList.length === 0) {
            document.documentElement.removeAttribute("class");
        }
    }

    window.localStorage.setItem(themeKey, theme);
</script>